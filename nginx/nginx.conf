worker_processes auto;
error_log /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

# Export environment variables to Lua
env REDIS_HOST;
env REDIS_PORT;
env MODEL_URL;
env MODEL_NAME;
env MODEL_TEMPERATURE;
env MODEL_TOP_P;
env MODEL_TOP_K;
env MODEL_NUM_CTX;
env MODEL_NUM_PREDICT;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Disable buffering for streaming
    sendfile off;
    tcp_nopush off;
    tcp_nodelay on;
    keepalive_timeout 65;
    
    proxy_buffering off;
    proxy_request_buffering off;
    proxy_http_version 1.1;
    
    # Lua package path
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
    
    # Lua timeouts
    lua_socket_read_timeout 600s;
    lua_socket_send_timeout 600s;
    lua_socket_connect_timeout 30s;

    server {
        listen 443;
        server_name localhost;

        # Chat page (root path)
        location = / {
            content_by_lua_block {
                local chat_handler = require "chat_handler"
                chat_handler.serve_chat_page()
            }
        }

        # Static assets
        location /static/ {
            root /usr/local/openresty/nginx;
            expires 1h;
        }

        # Chat API - streaming endpoint
        location = /api/chat/stream {
            lua_need_request_body on;
            
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Extended timeouts for AI responses
            proxy_read_timeout 600s;
            proxy_send_timeout 600s;
            
            content_by_lua_block {
                local chat_handler = require "chat_handler"
                chat_handler.handle_chat_stream()
            }
        }

        # Chat history endpoint
        location = /api/chat/history {
            content_by_lua_block {
                local chat_handler = require "chat_handler"
                chat_handler.handle_chat_history()
            }
        }

        # Clear chat endpoint
        location = /api/chat/clear {
            lua_need_request_body on;
            content_by_lua_block {
                local chat_handler = require "chat_handler"
                chat_handler.handle_clear_chat()
            }
        }

        # Default 404
        location / {
            return 404;
        }
    }
}